<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Folder" referent="RBX560A8D54AB83446BAE6A55D5DB6E9C5E">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
			<bool name="DefinesCapabilities">false</bool>
			<string name="Name">AccessoryImporterPro</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
		<Item class="Script" referent="RBX268F252D32A649B780FBC14C184D2C5D">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
				<bool name="DefinesCapabilities">false</bool>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Script</string>
				<token name="RunContext">0</token>
				<string name="ScriptGuid">{284C85D6-9728-4D02-8193-A66BF89C08E7}</string>
				<ProtectedString name="Source"><![CDATA[local Plugin = script.Parent.Parent

-- Plugin Settings
local TOOLBAR_NAME = "Accessory Importer Pro"
local WIDGET_TITLE = "âœ¨ Accessory Importer Pro v0.0.1"
local WIDGET_SIZE = Vector2.new(450, 600)

-- Color Palette
local COLORS = {
	Background = Color3.fromHex("#1e1e2e"),
	Card = Color3.fromHex("#2a2a3a"),
	Primary = Color3.fromHex("#7aa2f7"),
	PrimaryHover = Color3.fromHex("#8ab4ff"),
	Secondary = Color3.fromHex("#3b3b4d"),
	SecondaryHover = Color3.fromHex("#4c4c5e"),
	Text = Color3.fromHex("#e0e0e0"),
	SubText = Color3.fromHex("#a0a0a0"),
	Success = Color3.fromHex("#9ece6a"),
	Error = Color3.fromHex("#f7768e"),
	Warning = Color3.fromHex("#e0af68")
}

-- Create Toolbar
local toolbar = plugin:CreateToolbar(TOOLBAR_NAME)
local button = toolbar:CreateButton("Open", "Import accessories", "rbxassetid://4321867290")

-- Create Widget
local widgetInfo = DockWidgetPluginGuiInfo.new(
	Enum.InitialDockState.Float,
	false,
	false,
	WIDGET_SIZE.X,
	WIDGET_SIZE.Y
)

local widget = plugin:CreateDockWidgetPluginGui("ProAccessoryImporter", widgetInfo)
widget.Title = WIDGET_TITLE
widget.Name = "ProAccessoryImporter"
widget.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

-- Main Scroll Container
local scrollFrame = Instance.new("ScrollingFrame")
scrollFrame.Size = UDim2.new(1, 0, 1, 0)
scrollFrame.BackgroundColor3 = COLORS.Background
scrollFrame.BorderSizePixel = 0
scrollFrame.ScrollBarThickness = 8
scrollFrame.ScrollBarImageColor3 = COLORS.Primary
scrollFrame.ScrollBarImageTransparency = 0.5
scrollFrame.CanvasSize = UDim2.new(0, 0, 1.5, 0)
scrollFrame.Parent = widget

-- Main Frame with Alignment
local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(1, -20, 1.5, 0)
mainFrame.Position = UDim2.new(0, 10, 0, 0)
mainFrame.BackgroundTransparency = 1
mainFrame.Parent = scrollFrame

-- Main Window Rounding
local uiCorner = Instance.new("UICorner")
uiCorner.CornerRadius = UDim.new(0, 12)
uiCorner.Parent = widget

-- Title
local title = Instance.new("TextLabel")
title.Text = "ACCESSORY IMPORTER PRO"
title.TextColor3 = COLORS.Primary
title.TextSize = 18
title.Font = Enum.Font.GothamBold
title.Size = UDim2.new(1, 0, 0, 30)
title.Position = UDim2.new(0, 0, 0, 10)
title.BackgroundTransparency = 1
title.TextXAlignment = Enum.TextXAlignment.Left
title.Parent = mainFrame

local divider = Instance.new("Frame")
divider.Size = UDim2.new(1, 0, 0, 1)
divider.Position = UDim2.new(0, 0, 0, 45)
divider.BackgroundColor3 = COLORS.Card
divider.BorderSizePixel = 0
divider.Parent = mainFrame

-- Mode Switch Buttons
local modeSelector = Instance.new("Frame")
modeSelector.Size = UDim2.new(1, 0, 0, 40)
modeSelector.Position = UDim2.new(0, 0, 0, 55)
modeSelector.BackgroundTransparency = 1
modeSelector.Parent = mainFrame

local singleModeButton = Instance.new("TextButton")
singleModeButton.Text = "SINGLE ITEM"
singleModeButton.Size = UDim2.new(0.48, 0, 1, 0)
singleModeButton.Position = UDim2.new(0, 0, 0, 0)
singleModeButton.BackgroundColor3 = COLORS.Primary
singleModeButton.TextColor3 = COLORS.Text
singleModeButton.Font = Enum.Font.GothamBold
singleModeButton.TextSize = 14
singleModeButton.Name = "SingleMode"
singleModeButton.Parent = modeSelector

local bulkModeButton = Instance.new("TextButton")
bulkModeButton.Text = "MULTIPLE IMPORT"
bulkModeButton.Size = UDim2.new(0.48, 0, 1, 0)
bulkModeButton.Position = UDim2.new(0.52, 0, 0, 0)
bulkModeButton.BackgroundColor3 = COLORS.Secondary
bulkModeButton.TextColor3 = COLORS.Text
bulkModeButton.Font = Enum.Font.GothamBold
bulkModeButton.TextSize = 14
bulkModeButton.Name = "MultipleMode"
bulkModeButton.Parent = modeSelector

-- Round Mode Buttons
local modeButtonCorner = Instance.new("UICorner")
modeButtonCorner.CornerRadius = UDim.new(0, 6)
modeButtonCorner.Parent = singleModeButton

local modeButtonCorner2 = Instance.new("UICorner")
modeButtonCorner2.CornerRadius = UDim.new(0, 6)
modeButtonCorner2.Parent = bulkModeButton

-- Modes Container with Alignment
local modesContainer = Instance.new("Frame")
modesContainer.Size = UDim2.new(1, 0, 1, -160)
modesContainer.Position = UDim2.new(0, 0, 0, 105)
modesContainer.BackgroundTransparency = 1
modesContainer.ClipsDescendants = true -- For animation
modesContainer.Parent = mainFrame

-- Single Item Mode
local singleModeFrame = Instance.new("Frame")
singleModeFrame.Size = UDim2.new(1, 0, 1, 0)
singleModeFrame.BackgroundTransparency = 1
singleModeFrame.Visible = true
singleModeFrame.Name = "SingleModeFrame"
singleModeFrame.Parent = modesContainer

-- Single Item Input Card
local singleInputCard = Instance.new("Frame")
singleInputCard.Size = UDim2.new(1, 0, 0, 130)
singleInputCard.BackgroundColor3 = COLORS.Card
singleInputCard.Parent = singleModeFrame

local singleInputCardCorner = Instance.new("UICorner")
singleInputCardCorner.CornerRadius = UDim.new(0, 10)
singleInputCardCorner.Parent = singleInputCard

-- Input Fields and Buttons (grid aligned)
local singleInputLabel = Instance.new("TextLabel")
singleInputLabel.Text = "ACCESSORY ID"
singleInputLabel.TextColor3 = COLORS.SubText
singleInputLabel.TextSize = 12
singleInputLabel.Font = Enum.Font.GothamMedium
singleInputLabel.Size = UDim2.new(1, -20, 0, 15)
singleInputLabel.Position = UDim2.new(0, 10, 0, 10)
singleInputLabel.BackgroundTransparency = 1
singleInputLabel.TextXAlignment = Enum.TextXAlignment.Left
singleInputLabel.Parent = singleInputCard

local singleInputBox = Instance.new("TextBox")
singleInputBox.PlaceholderText = "Enter accessory ID"
singleInputBox.Size = UDim2.new(1, -20, 0, 40)
singleInputBox.Position = UDim2.new(0, 10, 0, 30)
singleInputBox.BackgroundColor3 = COLORS.Secondary
singleInputBox.TextColor3 = COLORS.Text
singleInputBox.Font = Enum.Font.Gotham
singleInputBox.TextSize = 14
singleInputBox.Parent = singleInputCard

local singleInputBoxCorner = Instance.new("UICorner")
singleInputBoxCorner.CornerRadius = UDim.new(0, 6)
singleInputBoxCorner.Parent = singleInputBox

local singlePreviewButton = Instance.new("TextButton")
singlePreviewButton.Text = "PREVIEW"
singlePreviewButton.Size = UDim2.new(0.48, 0, 0, 40)
singlePreviewButton.Position = UDim2.new(0, 10, 0, 80)
singlePreviewButton.BackgroundColor3 = COLORS.Secondary
singlePreviewButton.TextColor3 = COLORS.Text
singlePreviewButton.Font = Enum.Font.GothamBold
singlePreviewButton.TextSize = 14
singlePreviewButton.Parent = singleInputCard

local singleImportButton = Instance.new("TextButton")
singleImportButton.Text = "IMPORT"
singleImportButton.Size = UDim2.new(0.48, 0, 0, 40)
singleImportButton.Position = UDim2.new(0.52, 10, 0, 80)
singleImportButton.BackgroundColor3 = COLORS.Primary
singleImportButton.TextColor3 = COLORS.Text
singleImportButton.Font = Enum.Font.GothamBold
singleImportButton.TextSize = 14
singleImportButton.Parent = singleInputCard

-- Round Buttons
local buttonCorner1 = Instance.new("UICorner")
buttonCorner1.CornerRadius = UDim.new(0, 6)
buttonCorner1.Parent = singlePreviewButton

local buttonCorner2 = Instance.new("UICorner")
buttonCorner2.CornerRadius = UDim.new(0, 6)
buttonCorner2.Parent = singleImportButton

-- Preview (Single Mode)
local previewFrame = Instance.new("Frame")
previewFrame.Size = UDim2.new(1, 0, 0, 180)
previewFrame.Position = UDim2.new(0, 0, 0, 140)
previewFrame.BackgroundColor3 = COLORS.Card
previewFrame.Parent = singleModeFrame

local previewFrameCorner = Instance.new("UICorner")
previewFrameCorner.CornerRadius = UDim.new(0, 10)
previewFrameCorner.Parent = previewFrame

local previewImage = Instance.new("ImageLabel")
previewImage.Size = UDim2.new(1, -20, 0.7, 0)
previewImage.Position = UDim2.new(0, 10, 0, 10)
previewImage.BackgroundColor3 = COLORS.Secondary
previewImage.Image = "rbxassetid://7078533064"
previewImage.Parent = previewFrame

local previewImageCorner = Instance.new("UICorner")
previewImageCorner.CornerRadius = UDim.new(0, 6)
previewImageCorner.Parent = previewImage

local previewName = Instance.new("TextLabel")
previewName.Text = "No accessory selected"
previewName.TextColor3 = COLORS.Text
previewName.TextSize = 14
previewName.Font = Enum.Font.GothamMedium
previewName.Size = UDim2.new(1, -20, 0, 30)
previewName.Position = UDim2.new(0, 10, 0.7, 10)
previewName.BackgroundTransparency = 1
previewName.Parent = previewFrame

-- Bulk Import Mode
local bulkModeFrame = Instance.new("Frame")
bulkModeFrame.Size = UDim2.new(1, 0, 1, 0)
bulkModeFrame.BackgroundTransparency = 1
bulkModeFrame.Visible = false
bulkModeFrame.Position = UDim2.new(1, 0, 0, 0) -- Initial position for animation
bulkModeFrame.Name = "BulkModeFrame"
bulkModeFrame.Parent = modesContainer

-- Bulk Import Card
local bulkCard = Instance.new("Frame")
bulkCard.Size = UDim2.new(1, 0, 0, 200)
bulkCard.BackgroundColor3 = COLORS.Card
bulkCard.Parent = bulkModeFrame

local bulkCardCorner = Instance.new("UICorner")
bulkCardCorner.CornerRadius = UDim.new(0, 10)
bulkCardCorner.Parent = bulkCard

local bulkInput = Instance.new("TextBox")
bulkInput.PlaceholderText = "Enter IDs separated by commas or spaces\nExample: 123456, 789012, 345678"
bulkInput.Size = UDim2.new(1, -20, 0, 120)
bulkInput.Position = UDim2.new(0, 10, 0, 10)
bulkInput.BackgroundColor3 = COLORS.Secondary
bulkInput.TextColor3 = COLORS.Text
bulkInput.Font = Enum.Font.Gotham
bulkInput.TextSize = 14
bulkInput.TextWrapped = true
bulkInput.MultiLine = true
bulkInput.Parent = bulkCard

local bulkInputCorner = Instance.new("UICorner")
bulkInputCorner.CornerRadius = UDim.new(0, 6)
bulkInputCorner.Parent = bulkInput

local bulkImportButton = Instance.new("TextButton")
bulkImportButton.Text = "IMPORT ALL"
bulkImportButton.Size = UDim2.new(1, -20, 0, 40)
bulkImportButton.Position = UDim2.new(0, 10, 0, 140)
bulkImportButton.BackgroundColor3 = COLORS.Primary
bulkImportButton.TextColor3 = COLORS.Text
bulkImportButton.Font = Enum.Font.GothamBold
bulkImportButton.TextSize = 14
bulkImportButton.Parent = bulkCard

local bulkImportCorner = Instance.new("UICorner")
bulkImportCorner.CornerRadius = UDim.new(0, 6)
bulkImportCorner.Parent = bulkImportButton

-- Shared Elements (Character Selection and Status)
local characterCard = Instance.new("Frame")
characterCard.Size = UDim2.new(1, 0, 0, 100)
characterCard.Position = UDim2.new(0, 0, 0, 320)
characterCard.BackgroundColor3 = COLORS.Card
characterCard.Parent = mainFrame

local characterCardCorner = Instance.new("UICorner")
characterCardCorner.CornerRadius = UDim.new(0, 10)
characterCardCorner.Parent = characterCard

local selectCharacterButton = Instance.new("TextButton")
selectCharacterButton.Text = "SELECT CHARACTER"
selectCharacterButton.Size = UDim2.new(1, -20, 0, 40)
selectCharacterButton.Position = UDim2.new(0, 10, 0, 20)
selectCharacterButton.BackgroundColor3 = COLORS.Secondary
selectCharacterButton.TextColor3 = COLORS.Text
selectCharacterButton.Font = Enum.Font.GothamBold
selectCharacterButton.TextSize = 14
selectCharacterButton.Parent = characterCard

local selectButtonCorner = Instance.new("UICorner")
selectButtonCorner.CornerRadius = UDim.new(0, 6)
selectButtonCorner.Parent = selectCharacterButton

local selectedCharacterLabel = Instance.new("TextLabel")
selectedCharacterLabel.Text = "No character selected"
selectedCharacterLabel.TextColor3 = COLORS.SubText
selectedCharacterLabel.TextSize = 12
selectedCharacterLabel.Font = Enum.Font.Gotham
selectedCharacterLabel.Size = UDim2.new(1, -20, 0, 20)
selectedCharacterLabel.Position = UDim2.new(0, 10, 0, 65)
selectedCharacterLabel.BackgroundTransparency = 1
selectedCharacterLabel.TextXAlignment = Enum.TextXAlignment.Center
selectedCharacterLabel.Parent = characterCard

-- Status Bar
local statusBar = Instance.new("Frame")
statusBar.Size = UDim2.new(1, 0, 0, 40)
statusBar.Position = UDim2.new(0, 0, 0, 430)
statusBar.BackgroundColor3 = COLORS.Card
statusBar.Parent = mainFrame

local statusBarCorner = Instance.new("UICorner")
statusBarCorner.CornerRadius = UDim.new(0, 10)
statusBarCorner.Parent = statusBar

local statusLabel = Instance.new("TextLabel")
statusLabel.Text = "Ready"
statusLabel.TextColor3 = COLORS.Text
statusLabel.TextSize = 14
statusLabel.Font = Enum.Font.Gotham
statusLabel.Size = UDim2.new(1, -20, 1, 0)
statusLabel.Position = UDim2.new(0, 10, 0, 0)
statusLabel.BackgroundTransparency = 1
statusLabel.TextXAlignment = Enum.TextXAlignment.Left
statusLabel.Parent = statusBar

-- Animations
local tweenService = game:GetService("TweenService")

-- Button Setup Function with Animations
local function setupButton(button, normalColor, hoverColor)
	button.AutoButtonColor = false

	button.MouseEnter:Connect(function()
		tweenService:Create(button, TweenInfo.new(0.15), {BackgroundColor3 = hoverColor}):Play()
	end)

	button.MouseLeave:Connect(function()
		tweenService:Create(button, TweenInfo.new(0.15), {BackgroundColor3 = normalColor}):Play()
	end)

	button.MouseButton1Down:Connect(function()
		tweenService:Create(button, TweenInfo.new(0.1), {Size = button.Size - UDim2.new(0, 0, 0.05, 0)}):Play()
	end)

	button.MouseButton1Up:Connect(function()
		tweenService:Create(button, TweenInfo.new(0.2), {Size = button.Size + UDim2.new(0, 0, 0.05, 0)}):Play()
	end)
end

-- Setup All Buttons
setupButton(singleModeButton, COLORS.Primary, COLORS.PrimaryHover)
setupButton(bulkModeButton, COLORS.Secondary, COLORS.SecondaryHover)
setupButton(singlePreviewButton, COLORS.Secondary, COLORS.SecondaryHover)
setupButton(singleImportButton, COLORS.Primary, COLORS.PrimaryHover)
setupButton(selectCharacterButton, COLORS.Secondary, COLORS.SecondaryHover)
setupButton(bulkImportButton, COLORS.Primary, COLORS.PrimaryHover)

-- Variables
local selectedCharacter = nil
local currentAccessoryInfo = nil

-- Status Update Function
local function setStatus(text, color)
	statusLabel.Text = text
	statusLabel.TextColor3 = color

	statusLabel.TextTransparency = 1
	tweenService:Create(statusLabel, TweenInfo.new(0.3), {TextTransparency = 0}):Play()
end

-- Character Selection Function
local function selectCharacter()
	local selection = game:GetService("Selection"):Get()

	for _, item in ipairs(selection) do
		local humanoid = item:FindFirstChildOfClass("Humanoid")
		if humanoid then
			selectedCharacter = item
			selectedCharacterLabel.Text = "Selected: "..item.Name
			selectedCharacterLabel.TextColor3 = COLORS.Success

			-- Selection Animation
			tweenService:Create(
				selectedCharacterLabel,
				TweenInfo.new(0.3, Enum.EasingStyle.Back, Enum.EasingDirection.Out),
				{TextColor3 = COLORS.Success}
			):Play()

			setStatus("Character selected", COLORS.Success)
			return
		end
	end

	selectedCharacter = nil
	selectedCharacterLabel.Text = "No character selected"
	tweenService:Create(
		selectedCharacterLabel,
		TweenInfo.new(0.3),
		{TextColor3 = COLORS.SubText}
	):Play()
	setStatus("Select a model with Humanoid", COLORS.Error)
end

-- Accessory Info Fetching
local function fetchAccessoryInfo(assetId)
	local success, result = pcall(function()
		return game:GetService("MarketplaceService"):GetProductInfo(assetId)
	end)

	if success then
		return result
	else
		setStatus("Failed to load data", COLORS.Error)
		return nil
	end
end

-- Preview Function with Animation
local function showPreview(assetId)
	local info = fetchAccessoryInfo(assetId)
	if not info then return end

	currentAccessoryInfo = info

	-- Fade Out Animation
	tweenService:Create(previewImage, TweenInfo.new(0.2), {ImageTransparency = 1}):Play()
	tweenService:Create(previewName, TweenInfo.new(0.2), {TextTransparency = 1}):Play()

	wait(0.2)

	previewImage.Image = info.IconImageAssetUrl or "rbxassetid://7078533064"
	previewName.Text = info.Name or "Unknown accessory"

	-- Fade In Animation
	tweenService:Create(previewImage, TweenInfo.new(0.3), {ImageTransparency = 0}):Play()
	tweenService:Create(previewName, TweenInfo.new(0.3), {TextTransparency = 0}):Play()

	setStatus("Preview loaded", COLORS.Success)
end

-- Single Accessory Import
local function importSingleAccessory()
	if not selectedCharacter then
		setStatus("Select a character first!", COLORS.Error)
		return
	end

	local assetId = tonumber(singleInputBox.Text)
	if not assetId then
		setStatus("Enter a valid ID!", COLORS.Error)
		return
	end

	setStatus("Importing...", COLORS.Text)

	local success, errorMsg = pcall(function()
		local accessoryModel = game:GetService("InsertService"):LoadAsset(assetId)
		if accessoryModel then
			local foundAccessory = false

			-- Find and process all accessories in the model
			for _, item in ipairs(accessoryModel:GetDescendants()) do
				if item:IsA("Accessory") then
					foundAccessory = true
					local humanoid = selectedCharacter:FindFirstChildOfClass("Humanoid")
					local scaleFactor = humanoid and humanoid.RigType == Enum.HumanoidRigType.R6 and 0.8 or 0.5

					-- Remove old accessories of same type
					local accessoryType = item:GetAttribute("AccessoryType") or item.Name
					for _, oldAcc in ipairs(selectedCharacter:GetChildren()) do
						if oldAcc:IsA("Accessory") and 
							(oldAcc:GetAttribute("AccessoryType") == accessoryType or oldAcc.Name == accessoryType) then
							oldAcc:Destroy()
						end
					end

					-- Scale and attach accessory
					local handle = item:FindFirstChild("Handle")
					if handle then
						local originalSize = handle.Size
						handle.Size = Vector3.new(0.1, 0.1, 0.1)

						-- Parent to character
						item.Parent = selectedCharacter

						-- Animate scaling
						tweenService:Create(
							handle,
							TweenInfo.new(0.5, Enum.EasingStyle.Elastic),
							{Size = originalSize * scaleFactor}
						):Play()
					else
						item.Parent = selectedCharacter
					end
				end
			end

			-- Destroy the empty model after extracting accessories
			accessoryModel:Destroy()

			if not foundAccessory then
				setStatus("No accessory found in model", COLORS.Warning)
			else
				setStatus("Accessory added!", COLORS.Success)
			end
		end
	end)

	if not success then
		setStatus("Error: "..errorMsg, COLORS.Error)
	end
end
-- Bulk Import with Progress Animation
local function bulkImportAccessories()
	if not selectedCharacter then
		setStatus("Select a character first!", COLORS.Error)
		return
	end

	local idsText = bulkInput.Text
	if #idsText == 0 then
		setStatus("Enter accessory IDs!", COLORS.Error)
		return
	end

	-- Parse IDs
	local ids = {}
	for id in string.gmatch(idsText, "[^,%s]+") do
		id = tonumber(id)
		if id then table.insert(ids, id) end
	end

	if #ids == 0 then
		setStatus("Invalid IDs!", COLORS.Error)
		return
	end

	setStatus("Importing "..#ids.." accessories...", COLORS.Text)

	-- Button Animation
	bulkImportButton.Text = "0/"..#ids
	tweenService:Create(
		bulkImportButton,
		TweenInfo.new(0.3),
		{BackgroundColor3 = COLORS.Warning}
	):Play()

	local successCount = 0
	for i, assetId in ipairs(ids) do
		local success, errorMsg = pcall(function()
			local accessoryModel = game:GetService("InsertService"):LoadAsset(assetId)
			if accessoryModel then
				local foundInModel = false

				-- Process all descendants to find accessories
				for _, item in ipairs(accessoryModel:GetDescendants()) do
					if item:IsA("Accessory") then
						foundInModel = true
						local humanoid = selectedCharacter:FindFirstChildOfClass("Humanoid")
						local scaleFactor = humanoid and humanoid.RigType == Enum.HumanoidRigType.R6 and 0.8 or 0.5

						-- Remove old accessories of same type
						local accessoryType = item:GetAttribute("AccessoryType") or item.Name
						for _, oldAcc in ipairs(selectedCharacter:GetChildren()) do
							if oldAcc:IsA("Accessory") and 
								(oldAcc:GetAttribute("AccessoryType") == accessoryType or oldAcc.Name == accessoryType) then
								oldAcc:Destroy()
							end
						end

						-- Scale and attach accessory
						local handle = item:FindFirstChild("Handle")
						if handle then
							local originalSize = handle.Size
							handle.Size = Vector3.new(0.1, 0.1, 0.1)
							item.Parent = selectedCharacter

							-- Animate scaling
							tweenService:Create(
								handle,
								TweenInfo.new(0.5, Enum.EasingStyle.Elastic),
								{Size = originalSize * scaleFactor}
							):Play()
						else
							item.Parent = selectedCharacter
						end
					end
				end

				-- Destroy the empty model after extraction
				accessoryModel:Destroy()

				if foundInModel then
					successCount = successCount + 1
					bulkImportButton.Text = successCount.."/"..#ids
				else
					setStatus("No accessories in ID "..assetId, COLORS.Warning)
				end
			end
		end)

		if not success then
			setStatus("Error with ID "..assetId..": "..errorMsg, COLORS.Warning)
		end

		wait(0.1) -- Small delay between imports
	end

	-- Final Animation
	local resultColor = successCount == #ids and COLORS.Success or 
		successCount > 0 and COLORS.Warning or 
		COLORS.Error
	tweenService:Create(
		bulkImportButton,
		TweenInfo.new(0.3),
		{BackgroundColor3 = resultColor}
	):Play()

	setStatus("Imported "..successCount.."/"..#ids.." accessories", resultColor)

	-- Reset button after delay
	wait(1)
	bulkImportButton.Text = "IMPORT ALL"
	tweenService:Create(
		bulkImportButton,
		TweenInfo.new(0.3),
		{BackgroundColor3 = COLORS.Primary}
	):Play()
end


-- Mode Switch Animation
local function switchMode(mode)
	-- Button Animation
	tweenService:Create(
		singleModeButton,
		TweenInfo.new(0.3),
		{BackgroundColor3 = mode == "single" and COLORS.Primary or COLORS.Secondary}
	):Play()

	tweenService:Create(
		bulkModeButton,
		TweenInfo.new(0.3),
		{BackgroundColor3 = mode == "bulk" and COLORS.Primary or COLORS.Secondary}
	):Play()

	if mode == "single" then
		bulkModeFrame.Visible = false
		singleModeFrame.Visible = true

		-- Slide Animation
		tweenService:Create(
			singleModeFrame,
			TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
			{Position = UDim2.new(0, 0, 0, 0)}
		):Play()
	else
		singleModeFrame.Visible = false
		bulkModeFrame.Visible = true

		-- Slide Animation
		bulkModeFrame.Position = UDim2.new(-1, 0, 0, 0)
		tweenService:Create(
			bulkModeFrame,
			TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
			{Position = UDim2.new(0, 0, 0, 0)}
		):Play()
	end
end

-- Event Handlers
singleModeButton.MouseButton1Click:Connect(function() switchMode("single") end)
bulkModeButton.MouseButton1Click:Connect(function() switchMode("bulk") end)
selectCharacterButton.MouseButton1Click:Connect(selectCharacter)
singlePreviewButton.MouseButton1Click:Connect(function() showPreview(tonumber(singleInputBox.Text)) end)
singleImportButton.MouseButton1Click:Connect(importSingleAccessory)
bulkImportButton.MouseButton1Click:Connect(bulkImportAccessories)

-- Open/Close Window with Animation
button.Click:Connect(function()
	widget.Enabled = not widget.Enabled
end)

-- Initialization
switchMode("single")
setStatus("Ready", COLORS.Text)

-- Fix alignment on resize
widget:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
	mainFrame.Size = UDim2.new(1, -20, 1.5, 0)
end)]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
	</Item>
</roblox>